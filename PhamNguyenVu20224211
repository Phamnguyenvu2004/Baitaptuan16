#include <iostream>
#include <algorithm>

using namespace std;

// Cấu trúc một nút trong cây AVL
struct Node {
    int key;
    int height;
    Node* left;
    Node* right;

    Node(int val) : key(val), height(1), left(nullptr), right(nullptr) {}
};

// Hàm trả về chiều cao của cây con
int getHeight(Node* node) {
    return node ? node->height : 0;
}

// Hàm tính hệ số cân bằng
int getBalanceFactor(Node* node) {
    return node ? getHeight(node->left) - getHeight(node->right) : 0;
}

// Hàm cập nhật chiều cao
void updateHeight(Node* node) {
    if (node) {
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
    }
}

// Hàm xoay phải
Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    updateHeight(y);
    updateHeight(x);

    return x;
}

// Hàm xoay trái
Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    updateHeight(x);
    updateHeight(y);

    return y;
}

// Hàm cân bằng cây AVL
Node* balance(Node* node) {
    updateHeight(node);
    int balanceFactor = getBalanceFactor(node);

    // Trường hợp Left-Left
    if (balanceFactor > 1 && getBalanceFactor(node->left) >= 0) {
        return rotateRight(node);
    }

    // Trường hợp Right-Right
    if (balanceFactor < -1 && getBalanceFactor(node->right) <= 0) {
        return rotateLeft(node);
    }

    // Trường hợp Left-Right
    if (balanceFactor > 1 && getBalanceFactor(node->left) < 0) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }

    // Trường hợp Right-Left
    if (balanceFactor < -1 && getBalanceFactor(node->right) > 0) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

// Hàm chèn một nút mới
Node* insert(Node* node, int key) {
    if (!node) {
        return new Node(key);
    }

    if (key < node->key) {
        node->left = insert(node->left, key);
    } else if (key > node->key) {
        node->right = insert(node->right, key);
    } else {
        return node; // Không cho phép giá trị trùng lặp
    }

    return balance(node);
}

// Hàm in cây AVL theo thứ tự giữa (in-order)
void inOrderTraversal(Node* root) {
    if (root) {
        inOrderTraversal(root->left);
        cout << root->key << " ";
        inOrderTraversal(root->right);
    }
}

// Hàm chính
int main() {
    Node* root = nullptr;
    int arr[] = {20, 4, 15, 70, 50, 100, 10};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; i++) {
        root = insert(root, arr[i]);
    }

    cout << "Cây AVL theo thứ tự duyệt giữa (in-order): ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}
